ВСТУП

Сучасні технології все швидше і швидше розвиваються, цей технологічний процес не обійшов і сферу сільського господарства [1], з кожним днем з’являється все більше нових технологій, які допомагають фермерам та людям, які працюють у сільськогосподарській  сфері спрошувати та покращувати процес догляду за тваринами. Одним з таких інноваційних рішень може бути використання обладнання віртуальної реальності для корів.
Як показують дослідження [2], стрес корови може відобразитися на кількості та якості молока. Використання технологій віртуальної реальності може зменшити цей стрес тим самим покращуючи якість молока.
Саме тому і виникає потреба створення продукту для вирішення цієї проблеми, проблеми автоматизації та управління корівником з використанням обладнання віртуальної реальності для корів.
Пильне відстеження різних показників життєдіяльності корови може допомогти підвищити якість продукції та забезпечити кращі умови для тварин [3], і саме через це ця система буде мати попит на ринку.
 
1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1 Бізнес-вимоги
1.1.1 Бізнес-можливості

Аналоги:
iFarm[4]: система управління молочним скотарством, яка дозволяє відстежувати продуктивність корів, контролювати їхню активність та здоров'я, а також оптимізувати раціон харчування. З переваг можна перахувати – має широкій функціонал для відстежування продуктивності та контролю корів, допомагає працівникам оптимізувати раціон харчування.
MooMonitor[5]: система моніторингу стану корів, яка використовує датчики, встановлені на шиї тварини, для збору даних про її активність, жування, температуру тіла та інші параметри. Переваги MooMonitor – простий у використанні, датчики для контролю здоров’я легко встановити, надає широкий спектр функцій для відстеження здоров’я корів.
Наша програмна система буде надавати такі переваги на іншими системами:
Переваги нашого продукту: 
Використання технологій віртуальної реальності в цій галузі є новим та перспективним напрямком, що дозволяє системі виділитися на ринку.
Комплексність та гнучкість: система може бути налаштована відповідно до індивідуальних потреб та вимог кожного фермера.
Покращення добробуту тварин: використання технологій віртуальної реальності може допомогти фермерам створити більш комфортні та природні умови утримання корів, що позитивно впливає на їхнє здоров'я та продуктивність.
Зважаючи на унікальні можливості нашої програмної системи для управління корівником у віртуальній реальності, ми розглядаємо наступні методи монетизації:
Індивідуальні підписки для фермерів: ми впевнені, що надання доступу до розширених функцій нашої платформи через платні підписки буде привабливим для фермерських господарств будь-якого розміру. Вибір між різними рівнями підписки дозволить фермерам вибрати той, що найкраще відповідає їхнім потребам і бюджету.
Базова версія з можливістю преміального оновлення: ми можемо запропонувати базову версію нашої програми за ціну нижче ринкової, щоб дозволити фермерам ознайомитися з її можливостями та перевагами. З плином часу ми можемо пропонувати нові функції за додаткову плату.
Співпраця з виробниками обладнання та програмного забезпечення: ми можемо встановити партнерські відносини з компаніями, що виробляють обладнання та програмне забезпечення для віртуальної реальності. Це дозволить нам отримувати додатковий дохід через продаж обладнання та інші послуги через нашу платформу.
Використання цих методів монетизації є важливим для забезпечення стійкого фінансового розвитку нашої компанії та подальшого зростання на ринку. Платні підписки та преміальні функції дозволять нам забезпечити стабільний потік доходу, тоді як співпраця з партнерами дозволить нам розширити наші можливості та залучити нових клієнтів. Такий підхід також стимулює постійний розвиток та вдосконалення нашого продукту, щоб відповідати потребам наших користувачів у найкращий спосіб.

1.1.2 Бізнес-цілі та критерії успіху 

Бізнес цілі:
БЦ-1: Зменшити на 25% рівень стресу у корів протягом 1 року за допомогою віртуальних середовищ, розроблених для покращення їхнього емоційного стану.
БЦ-2: Збільшити продуктивність корів на 15% протягом 2 років завдяки покращенню їхнього емоційного та фізичного стану.
БЦ-3: Зменшити використання антибіотиків на 12% протягом 2 років за рахунок профілактики захворювань та покращення імунітету тварин.
БЦ-4: Оптимізувати витрати на корми та інші ресурси на 10% протягом 1 року за рахунок більш точного прогнозування потреб тварин на основі даних, отриманих з ВР-системи.
БЦ-5: Підвищити рентабельність інвестицій фермерів на 7% протягом 2 років за рахунок покращення продуктивності, зниження витрат та покращення загального здоров'я тварин.
БЦ-6: Зайняти 15% частки ринку програмного забезпечення для управління корівниками протягом 3 років, ставши лідером в цій галузі.
БЦ-7: Збільшити кількість клієнтів на 400% протягом 5 років, пропонуючи інноваційні та ефективні рішення для покращення добробуту тварин та роботи ферм.
БЦ-8: Підвищити пізнаванність бренду на 80% протягом 5 років, ставши синонімом передових ВР-технологій в тваринництві.
Критерії успіху:
КУ-1: Мати на платформі щонайменше 5000 активних користувачів протягом 2 років.
КУ-2: Збільшити кількість користувачів на 20% щорічно протягом 5 років.
КУ-3: Досягти рівня конверсії з базової версії на покращену у  20%.
КУ-4: Збільшити середній чек на користувача на 15% щорічно протягом 5 років.
КУ-5: Досягти середнього рейтингу задоволеності користувачів 4,7 з 5 зірок протягом 1 року.
КУ-6: Збільшити на 20% кількість лояльних користувачів, які використовують платформу протягом 6 місяців і більше, протягом 1 року.

1.1.3 Потреби клієнтів або ринку

Потреби користувачів:
Зниження стресу та покращення емоційного стану корів: Фермери прагнуть зменшити стрес у своїх корів, адже це негативно впливає на їхнє здоров'я, продуктивність та якість молока. ВР-технології дозволяють створювати віртуальні середовища, які максимально наближені до природних умов проживання корів, що може значно знизити рівень стресу.
Оптимізація умов утримання тварин: Фермери прагнуть створити комфортні та природні умови утримання корів, що позитивно впливає на їхнє здоров'я, продуктивність та поведінку. ВР-системи дозволяють збирати та аналізувати дані про поведінку тварин, що може допомогти фермерам у оптимізації умов утримання.
Зменшення витрат часу та ресурсів: Фермери прагнуть оптимізувати свої робочі процеси, щоб зменшити витрати часу та ресурсів. Система прагне покращити 
Підвищення продуктивності тварин: Фермери зацікавлені у збільшенні продуктивності своїх корів, щоб отримати більший прибуток. ВР-системи дозволяють знижувати стрес корів тим самим підвищуючи їх продуктивність.
Ринкові потреби:
Зростаючий попит на гуманні методи тваринництва. Суспільство стає все більш свідомою щодо добробуту тварин, і все більше споживачів віддають перевагу продуктам, вирощеним гуманно. ВР-технології пропонують інноваційний спосіб покращити добробут тварин, що може допомогти фермерам задовольнити цей зростаючий попит.
Пошук нових технологій для покращення продуктивності. Тваринництво стикається з викликами, пов'язаними зі зростаючим попитом на продукти тваринного походження. ВР-технології пропонують нові можливості для оптимізації умов утримання тварин, покращення їхнього здоров'я та продуктивності, що може допомогти фермерам задовольнити цей попит.
Необхідність у зборі та аналізі даних. Ефективне управління фермою потребує збору та аналізу великих обсягів даних про стан поголів'я, умови утримання та продуктивність тварин. ВР-системи пропонують інноваційний спосіб збору та аналізу цих даних, що може допомогти фермерам у прийнятті кращих управлінських рішень.
 
1.1.4 Бізнес-ризики

Бізнес ризики:
Технологічні проблеми та збої. Віртуальна реальність та технічні системи, пов'язані з управлінням корівником, можуть бути схильні до технічних неполадок та збоїв, що може вплинути на надійність та доступність нашої системи.
Обмежена адаптабельність фермерів. Фермери, особливо ті, які мають обмежений досвід з використання технологій, можуть зустрічати труднощі з впровадженням та використанням віртуальної реальності для управління корівником, що може призвести до повільного прийняття нашої системи.
Низький попит на ринку: Можливість низького попиту нашої програмної системи через обмежений інтерес або потреби від фермерських господарств може обмежити наш потенційний ринок та прибутковість проекту.
Зміни у законодавстві: Зміни в правовому середовищі, що стосуються сільського господарства або технологій, можуть вимагати від нас адаптації або змін у нашій програмній системі, що може призвести до додаткових витрат та затримок у розвитку.
Висока ціна рішення. Фермери що займаються фермерство не на великі масштаби можуть не побачити перспективи у цьому продукті через високу ціну даного рішення, через що програмна система може мати набагато менший попит.

1.2 Концепція рішення
1.2.1 Окреслення концепції

Наша програмна система для керування корівником з використанням обладнання віртуальної реальності є інноваційним рішенням, спрямованим на покращення управління корівниками та підвищення якості молока. Використання технології віртуальної реальності дозволить нам зменшити стрес у корів, створюючи для них сприятливі умови і середовище. Це забезпечить спокій та комфорт для тварин, що в свою чергу позитивно вплине на якість та кількість молока. 
Наша програмна система вирішує низку викликів та проблем, з якими стикаються фермери та власники корівників. Зокрема, вона допомагає у покращенні управління господарством, зниженні стресу у корів, підвищенні якості молока та ефективності виробництва. Крім того, вона сприяє розвитку нових методів моніторингу та аналізу стану та поведінки тварин, що дозволяє вчасно виявляти проблеми та реагувати на них.
Наша цільова аудиторія включає фермерів та власників корівників, які прагнуть покращити управління своїми господарствами та забезпечити комфорт та благополуччя для своїх тварин. Також ми спрямовуємося на ветеринарів та експертів з сільського господарства, які цікавляться новими технологіями та методами для підвищення продуктивності та добробуту тварин.
Мета програмної системи – створити інноваційний продукт, який допоможе фермерам на усій планеті зробити проживання корів більш комфортним, тим самим покращив не лише стан корів, а і прибуток фермерів за допомогою підвищення якості молока.

1.2.2 Головна функціональність

MF-1: Реєстрація та створення ферми.
MF-2: Додавання співробітників, корів та обладнання. 
MF-3: Відстеження стан корів.
MF-4: Керування ВР пристроями.
MF-5: Підтримка мов та регіональних особливостей.
MF-6: Збереження історію станів корів.
MF-7: Налаштування ферми та обладнання.
MF-8: Керування персоналом ферми.
 
1.2.3 Припущення та залежності

Припущення №1: Фермери на фермі мають доступ до технології віртуальної реальності та зручних для використання пристроїв, які дозволять їм взаємодіяти з програмною системою.
Припущення №2: Фермери та власники корівників готові прийняти новий підхід до управління корівниками та використовувати інноваційні технології для зниження стресу у корів та покращення якості молока.
Припущення №3: Виробники молока та фермери готові надавати необхідну інформацію про стан корів та умови у корівниках для інтеграції їх даних з програмною системою та активної участі у процесі використання системи.
Залежність №1: Наша система залежить на стабільне підключення до Інтернету для роботи системи.
Залежність №2: Інтеграція з платіжними системами та провайдерами фінансових послуг необхідна для обробки платежів за користування системою та забезпечення фінансової безпеки.
Залежність №3: Наша система залежить від виробників продукції для надання актуальної інформації про корів та їх умови у корівниках, тому активна участь виробників у консультаціях та співпраця з ними є важливою.
Залежність №4: Для користування нашою програмною системою користувачам необхідно мати пристрої вводу, такі як віртуальні або розширені реальності, що дозволять їм взаємодіяти з системою та правильно виконувати завдання.
 
1.3 Рамки та обмеження проєкту
1.3.1 Рамки первинного випуску

Веб-застосунок:
MF-1: Реєстрація та створення профілю:
Користувачі зможуть створити обліковий запис та профіль у програмній системі для керування корівником. Реєстрація буде доступна через електронну пошту.
MF-2: Створення ферми:
Користувачі матимуть можливість створити нову ферму в системі, вказавши необхідну інформацію, таку як назва ферми, розташування, тип та кількість корів.
MF-3: Конфігурація ферми:
Після створення ферми, користувачі зможуть налаштувати різні параметри ферми, такі як розмір корівника, тип обладнання для віртуальної реальності, маркування корів для відстеження тощо.
MF-4: Додавання корів та обладнання:
Користувачі зможуть додавати корів до своєї ферми, вказуючи їхні характеристики та маркування для відстеження. Також буде можливість додавати обладнання для віртуальної реальності та інші технічні засоби.
Мобільний застосунок:
MF-5: Моніторинг корів та управління обладнанням:
Фермери та робітники зможуть слідкувати за станом та поведінкою корів у реальному часі. Вони також матимуть можливість керувати обладнанням та виконувати необхідні дії для забезпечення комфорту тварин.
MF-6: Мобільне управління обладнанням:
Користувачі зможуть управляти функціями системи та обладнанням ферми через мобільний додаток, що дозволить керувати процесами навіть у віддаленому режимі.
 
IoT:
MF-7: Відстеження здоров'я тварин:
Працівники ферми матимуть можливість відстежувати здоров'я своїх корів та отримувати сповіщення про будь-які відхилення в їх стані.
MF-8: Статистика корів 
З використанням даних, які були занесені до системи, вона буде вести та збирати статистику.

1.3.2 Рамки наступних випусків

MF-1: Покращення ВР системи:
Додання нових систем ВР технологій, за допомогою покращення обладнання яке використовується для користуванням ВР технологіями для корів.

1.3.3 Обмеження та винятки

Обмеження та винятки:
	Інтернет-залежність. Система вимагає стабільного підключення до інтернету для коректної роботи.
	Технічні вимоги. Деякі функції можуть бути обмежені технічними характеристиками пристроїв фермерів, які заносять інформацію.
	Залежність від виробників. Робота системі та пристроїв сильно залежить від якості пристроїв які виготовить виробник.
 
1.4 Бізнес-контекст
1.4.1 Профілі зацікавлених сторін

Таблиця 1.1 – Профілі зацікавлених сторін проекту
Зацікавлена сторона	Обмеження	Основні інтереси	Ставлення	Основна Цінність
Користувачі	Нестабільне інтернет-підключення, технічні обмеження	Зручність та доступність системи, покращення стану корів	Зацікавлені в покращенні стану корів	Покращення стану корів, якості молока та продуктивності корів
Виробники	Залежність від активності фермерів	Можливість покращити стан корів 	Покращення продуктивності та якості молока покаже якість продукту	Здатність покращити стан корів
Адміністратори	Коректна робота обладнання 	Забезпечити кращий побут корів, зменшити їх стрес та підвищити продуктивність	Спрямовані на правильну роботу системи	Управління фермерами та обладнання
 
1.4.2 Пріоритети проєкту

Таблиця 1.2 – Пріоритети проекту
Показник	Виконання
(етапи)	Обмеження
(граничні значення)	Ступінь свободи
(допустимий діапазон)
План робіт	Продукт має бути випущеним приблизно до 01.09.2024		Можливе відхилення від графіку на 1-3 місяців
Функціонал			90% функціоналу має працювати на релізі 1.0
Персонал		1 розробника та 1 тестувальник	
Ціна		≈ 1000 дол. США	Допустиме відхилення на 15%

1.4.3 Робоче середовище

Основним інтерфейсом нашої програмної системи буде веб-додаток, який буде сумісним із сучасними веб-браузерами, такими як Opera, Google Chrome та Microsoft Edge. Цей веб-додаток буде розроблятися за допомогою фреймворку Next.js, TypeScript, React і бібліотеки стилів Tailwind для створення інтерфейсу користувача.
Серверна частина системи буде створена на платформі Node.js. Дані будуть зберігатися в базі даних PostgreSQL, з керуванням через платформу Supabase.
Мобільний додаток буде розроблено для операційної системи Android з використанням Android Studio та мови програмування Kotlin.
Для розробки IoT пристрою буде використана платформа Arduino ESP32, програмування буде виконуватися на мові C++.
2 ПОСТАНОВКА ЗАДАЧІ

За результатами аналізу предметної області, задачею для курсової роботи було визначено створення програмної для керування корівником з використанням обладнання віртуальної реальності для корів. Отже наша програмна система повинна задовільнять такі вимоги:
Функціональна можливість користувача:
Програмна система для керування корівником з використанням обладнання віртуальної реальності для корів
Функціонал для фермерів:
	Реєстрація та вхід в систему: Забезпечує доступ до всіх функцій системи;
	Розробка сценаріїв утримання: Враховує різні типи середовищ, потреби корів та їхню поведінку;
	Автоматичне генерування звітів: Аналізує продуктивність та здоров'я корів, виявляє сфери для покращення;
	Відстеження індивідуальних показників: Моніторинг стану здоров'я та продуктивності кожної корови;
	Керування профілями тварин: Включає доступ до інформації про кожну корову та її прогрес.
Функціонал для обслуговуючого персоналу:
	Реєстрація та вхід в систему: Забезпечує доступ до функцій, необхідних для виконання завдань;
	Проходження тренувань: Навчання правильному догляду за тваринами та роботі з обладнанням;
	Перегляд результатів та статистичних даних: Дозволяє аналізувати ефективність роботи та вплив на здоров'я корів;
	Отримання зворотного зв'язку: Персоналізовані рекомендації від системи для покращення догляду за тваринами;
	Аналіз помилок: Допомагає уникати повторення помилок в реальних умовах.
Адміністративна панель:
	Реєстрація та вхід в систему: Доступ до управлінських функцій системи;
	Керування користувачами: Додавання, редагування та видалення профілів користувачів;
	Перегляд та керування сценаріями утримання: Контроль та налаштування умов утримання корів;
	Керування пристроями та їх параметрами: Налаштування та контроль за роботою обладнання віртуальної реальності;
	Експорт та імпорт даних: Управління даними системи для аналізу та зберігання;
	Експорт та імпорт сертифікатів: Управління сертифікатами для підтвердження якості догляду за тваринами.
IoT модуль:
	Відстеження даних корови: Відстеження кількості молока що корова зробила, відстеження температури молока та температури корови.
Мобільний застосунок для фермерів:
	Реєстрація та вхід в систему: Доступ до всіх функцій застосунку;
	Розробка сценаріїв утримання: Створення та налаштування середовищ для покращення умов утримання корів;
	Автоматичне генерування звітів: Аналіз продуктивності та здоров'я корів;
	Відстеження показників: Моніторинг здоров'я та поведінки корів.
 
3 ПРОЄКТУВАННЯ БАЗИ ДАНИХ

Для проектування бази даних було розроблено ER-модель даних (див. рис. 3.1). Вона складається з 6 таблиць: користувач, працівник (фермер), звіт, ферма, корова та обладнання.
 
Рисунок 3.1 – ER-діаграма

Розглянемо зв’язки між таблицями:
	Worker - User (Працівник - Користувач): Кожен працівник має унікальний обліковий запис користувача, що забезпечує індивідуальний доступ до системи. Це реалізується через зовнішній ключ user_id у таблиці Worker, який однозначно посилається на запис у таблиці User.
	Worker - Farm (Працівник - Ферма): Працівник може бути закріплений за конкретною фермою, що дозволяє відстежувати, хто де працює. Зовнішній ключ farm_id у таблиці Worker вказує на ферму, де працівник зайнятий.
	Cow - Farm (Корова - Ферма): Кожна корова належить певній фермі, що важливо для обліку поголів'я та управління стадом. Зовнішній ключ farm_id у таблиці Cow визначає, на якій фермі знаходиться корова.
	Equipment - Farm (Обладнання - Ферма): Обладнання закріплюється за конкретною фермою для ефективного контролю та обліку ресурсів. Зовнішній ключ farm_id у таблиці Equipment вказує на ферму, якій належить обладнання.
	Report - Worker (Звіт - Працівник): Звіт завжди створюється конкретним працівником, що дозволяє відстежувати відповідальність та авторство. Зовнішній ключ worker_id у таблиці Report визначає автора звіту.
	Report - Cow (Звіт - Корова): Звіт може стосуватися конкретної корови, що дає змогу фіксувати інформацію про стан тварини, надої тощо. Зовнішній ключ cow_id у таблиці Report вказує на корову, про яку йдеться у звіті. 
Також треба первірити чи відповідає наша бази даних 3 нормальним формам, щоб розуміти що наша схема бази даних максимально правильна:
	Перша нормальна форма (1NF): Кожен атрибут у таблицях містить лише атомарні значення (тобто не є списками чи вкладеними таблицями). Наприклад, у таблиці Worker атрибути worker_id, name, farm_id містять лише одне значення.
	Друга нормальна форма (2NF): База даних відповідає 2NF, оскільки всі таблиці мають простий первинний ключ (тобто ключ складається з одного атрибута).
	Третя нормальна форма (3NF): Немає явних транзитивних залежностей між неключовими атрибутами. Наприклад, у таблиці Worker атрибут name залежить лише від первинного ключа worker_id, а не від інших атрибутів.
 
4 АРХІТЕКТУРА ПРОГРАМНОЇ СИСТЕМИ
4.1 Архітектура серверної частини

Для початку розглянемо діаграму прецедентів (рис. 4.1). В програмній системі буде три види користувачів, які будуть мати такі функції:
	Адміністратор: Має повний доступ до системи. Може додавати та видаляти співробітників, додавати та видаляти корів, додавати та видаляти обладнання, відстежувати стан корів, керувати ВР пристроями, налаштовувати ферму та обладнання, переглядати історію станів корів, керувати персоналом ферми та переглядати статистику корів, тобто він має повний доступ до бази даних програмної системи.
	Фермер: Може відстежувати стан корів, керувати ВР пристроями, переглядати історію станів корів та переглядати статистику корів.
	Власник ферми: Може створювати ферму, а також додавати усю потрібну інформацію, таку як фермерів, тварин, може переглядати статистику по фермі та коровам.
Для проекту була обрана Гібридна архітектура, що поєднує серверну та мікросервісну, була обрана для цього проекту з метою досягнення оптимального балансу між централізованим управлінням та гнучкістю мікросервісів. Серверна частина забезпечує централізовану обробку даних та управління основними функціями системи, такими як створення ферм та налаштування їх параметрів. Це спрощує розробку та підтримку системи, забезпечуючи єдину точку входу та управління.
Мікросервіси використовуються з метою спрощення розробки і аутсорсингу розробки системи користувачів і бази даних на мікросервіси з відкритим кодом.
Крім того, гібридна архітектура дозволяє розподілити навантаження між сервером та мікросервісами, що підвищує продуктивність та надійність системи. У разі відмови одного мікросервісу, інші компоненти продовжать працювати.
 
Рисунок 4.1 – Діаграма прецедентів

Таким чином, гібридна архітектура є оптимальним вибором для цього проекту, оскільки вона дозволяє поєднати переваги серверної та мікросервісної архітектур, забезпечуючи ефективну реалізацію функціональності системи та відповідність вимогам проекту.
Систему буде побудовано на базі хмарної платформи Supabase, яка надає функціональність бази даних PostgreSQL, а також вбудовані сервіси аутентифікації та авторизації користувачів
Веб-сервер, розроблений з використанням Node.js та фреймворку Next.js, відповідає за обробку запитів від клієнтів, виконання серверної логіки, рендеринг сторінок та обробку даних. 
Для взаємодії з зовнішніми застосунками та сервісами використовується Rest API, що надає стандартизований інтерфейс для доступу до даних та функціональності сервера. Це дозволяє інтегрувати систему з іншими платформами та розширювати її можливості.
Для кращого розуміння технологій та їх взаємодій один з одним було побудовано діаграму розгортання (рис. 4.2). За допомогою використання цих технологій ми можемо отримати масштабовану сучасну систему, яка буде виконувати поставлені задачі. 
 
Рисунок 4.2 – Діаграма розгортання
 
4.2 Архітектура ІоТ частини

Спочатку розглянемо будову пристрою ІоТ, для того щоб далі було легше розуміти його функціонал. Рисунок з побудовою пристрою наведено далі (рис. 4.3).
 
Рисунок 4.3 – Будова пристрою ІоТ

Пристрій складається з центрального компонента ESP32, який являє собою потужний мікроконтролер з вбудованими модулями Wi-Fi та Bluetooth, цей пристрій служить "мозком" пристрою, виконуючи програму, обробляючи дані з датчиків, керує індикаторами та здійснюючи зв'язок з іншими пристроями через мережу. 
Також пристрій має кнопку, яка підключена до піна GPIO 5 на ESP32 через підтягувальний резистор, вона використовується для зупинки процесу доїння. Ще одним компонентом є світлодіоди, які підключені до пінів GPIO 12 та GPIO 13, вони використовуються для індикації стану пристрою (готовність, передача даних, завершення). І два сенсори температури DHT22 підключених через GPIO 18 та GPIO 19, призначених для постійного збору поточної інформацію про температуру навколишньої середи, а також температуру тіла корови.
Ціль пристрою автоматизації процесу доїння корів, та збору даних під час доїння, таких як температура повітря, температура тіла корови, та об’єм молока який був надоєний. Після налаштування підключення до Wi-Fi та ініціалізації компонентів, пристрій починає збирати інформацію. При натисканні кнопки пристрій завершує збір даних, обробляє їх, формує звіт у форматі JSON та відправляє його на сервер через інтернет. Після цього пристрій сигналізує про завершення роботи. Розглянемо детальніше функціонал ІоТ і для цього побудуємо діаграму прецедентів (рис. 4.4)
 
Рисунок 4.4 – Діаграма прецедентів для ІоТ

Система підключається до мережі, починає доїння, збирає дані та , коли працівник натискає на кнопку, відправляє їх в базу даних. Вимкнення пристрою може бути ініційовано як фермером, так і системою після завершення доїння. Для кращого розуміння розглянемо діаграму взаємодій (див. рис. 4.5).
 
Рисунок 4.5 – Діаграма взаємодії

Діаграма описує процес доїння, який починається з перевірки підключення до інтернету. Якщо підключення вдалося, починається процес доїння, під час якого, збираються дані, які потім відправляються на сервер. Якщо при відправці виникає проблема, пристрій намагається відправити дані повторно.
Тепер розробимо діаграму активності, щоб описати дії які виконує пристрій (див.рис.4.6).
 
Рисунок 4.6 – Діаграма активності
 
5 ОПИС ПРОГРАМНОЇ СИСТЕМИ
5.1 Запуск застосунку

Для запуску веб-застосунку та серверної частини, після завантаження проекту з GitHub репозиторію, нам потрібно відкрити його у командній строчці, або будь-якого виду терміналі. Для запуску нам буде потрібен застосунок Node.js 18, або новіший, який включає в себе npm (Node Package Manager), а також Docker для коректної роботи функції створення резервної копії. Для першого запуску нам потрібно завантажити усі бібліотеки з серверу, для цього прописуємо команду «npm install», це може зайняти декілька хвилин. Для запуску системи нам треба прописати команду «npm start», для запуску в режимі production, або «npm run dev», для запуску в режимі розробки.
Для запуску IoT девайсу, спершу треба підготувати девайс (або зібрати його в емуляторі), а також завантажити з репозиторію код для смарт девайсу. Усе, що нам залишилось – це завантажити код у Arduino і підключити його до електрохарчування. Девайс готовий до роботи після того як загорілися обидва сигнальних LED.

5.2 Програмна реалізація

На даному етапі наша система не розміщена на хостингу, тому після запуску для того щоб з нею взаємодіяти потрібно відкрити в браузері сторінку адресу «localhost:3000». 
Нас зустрічає головна сторінка (рис. 5.1), на якій в подальшому буде розміщено матеріали які розповідають про нашу платформу та закликають нових користувачів авторизуватися. Для цього треба натиснути на кнопку «Log In», це перекине нас на сторінку авторизації (рис. 5.2), де ми можемо увійти в свій акаунт за допомогою пошти та пароля, після натискання на кнопку «Log In», нас поверне на головну сторінку з оновленим доступом до інших частин сайту (рис. 5.3). Якщо ж користувача ще не зареєстровано в системі, йому слід натиснути на кнопку «Sign Up», після чого йому, на вказану пошту, прийде лист для підтвердження адреси (рис. 5.4). Після натискання на посилання в листі, користувача буде повернено на головну сторінку і автоматично авторизовано в системі.
 
Рисунок 5.1 – Головна сторінка без авторизації
 
Рисунок 5.2 – Сторінка авторизації

Рисунок 5.3 – Головна сторінка після авторизації
 
Рисунок 5.4 – Лист підтвердження пошти

Розглянемо функціонал якого дістає авторизований в системі користувач. Якщо натиснути кнопку «Admin» на верхній панелі, нас перекине на сторінку для адміністрування (рис. 5.5), якщо не авторизований користувач спробує перейти на сторінку через url, його переадресує на екран авторизації. Тут у нас є можливість створити та завантажити резервну копію бази даних для локального зберігання. Якщо натиснути на кнопку «Create» на панелі «Reserve Copy», почнеться процес створення резервної копії, що буде сигналізовано індикатором «Loading…», це може зайняти декілька хвилин. У цей час сервер надасть базі даних команду для створення резервної копії усіх даних. Після того як процес завершиться, резервна копія опиниться на сервері, а на панелі «Reserve Copy» опиниться кнопка «Download» (рис. 5.6), при натисканні якої в браузері користувача розпочнеться загрузка файлу з резервною копією у форматі sql.
 
Рисунок 5.5 – Сторінка адміністрування
 
Рисунок 5.6 – Резервна копія готова до завантаження
Також, тепер в нас є до екрану перегляду інформації про корову (рис. 5.7). Тут ми можемо продивитись інформацію про корову, її ім’я, виміри, та статистику. 
Статистика корови відображається у виді графіків, вона вираховується в реальному часі виходячи зі звітів, що надсилаються на сервер з девайсу IoT, який прив’язано до відповідної корови. Ми беремо статистику з серверу по певній корові та розподіляємо по відповідним дням, якщо в один день було надіслано декілька звітів, ми беремо середнє значення.
Цей екран призначений допомогти робітникам та власникам ферми відстежити ефективність догляду, середовища корови, а також користь застосування ВР-обладнання під час доїння корови.
 
Рисунок 5.7 – Сторінка показників корови

ВИСНОВКИ

В результаті виконання курсової роботи, було спроектовано та розроблено програмну систему для управління корівником з використанням віртуальної реальності для корів. Для цього на стадії планування було проаналізовано ринок та потреби майбутніх користувачів.
На стадії проектування були обрані виключно перспективні сучасні технології з відкритим вихідним кодом для забезпечення надійності та довгострокової підтримки для всіх модулів нашої програмної системи.
Веб-застосунок та сервер було розроблено на основі технологій React.js, Node.js з використанням фрейморку Next.js на мові програмування TypeScript. Була обрана база даних PostgreSQL і налаштована виключно під потреби розробленої платформи.
Одною з найголовніших частин цієї системи є пристрій Smart Device, розроблений на основі технології Arduino, який надає нашим потенційним користувачам такої необхідної автоматизації в галузі фермерства та сільського господарства.
 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1. A Turkish Farmer Tests Out VR Goggles on Cows To Get More Milk. URL: https://interestingengineering.com/innovation/a-turkish-farmer-tests-out-vr-goggles-on-cows-to-get-more-milk (дата звернення 27.06.2024)
2. Assessment of Stress Levels in Lactating Cattle: Analyzing Cortisol Residues in Commercial Milk Products in Relation to the Temperature-Humidity Index. URL: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10417798/ (дата звернення 27.06.2024)
3. Effects of heat stress on body temperature, milk production, and reproduction in dairy cows: a novel idea for monitoring and evaluation of heat stress. URL: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6722315/ (дата звернення 27.06.2024)
4. Vertical Farming Technology iFarm. URL: https://ifarm.fi/ (дата звернення 27.06.2024)
5. Moomonitor+ Dairymaster. URL: https://interestingengineering.com/innovation/a-turkish-farmer-tests-out-vr-goggles-on-cows-to-get-more-milk (дата звернення 27.06.2024)
